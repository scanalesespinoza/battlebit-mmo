#! /usr/bin/env node

/*
 *
 *  Copyright 2016-2017 Red Hat, Inc, and individual contributors.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

'use strict';

// Providing a title to the process in `ps`
process.title = 'nodeshift'; // Thanks Ember-cli :)

const fs = require('fs');
const yargs = require('yargs');

const helpers = require('../lib/helpers');

/* eslint no-unused-expressions: "warn" */
yargs
  .usage('[--options]')
  .command(['deploy', '$0'], 'default command - deploy', { cmd: { default: 'deploy' } }, commandHandler)
  .command('build', 'build command', { cmd: { default: 'build' } }, commandHandler)
  .command('resource', 'resource command', { cmd: { default: 'resource' } }, commandHandler)
  .command('apply-resource', 'apply resource command', { cmd: { default: 'apply-resource' } }, commandHandler)
  .command('undeploy [removeAll]', 'undeploy resources', { cmd: { default: 'undeploy' } }, commandHandler)
  .option('projectLocation', {
    describe: 'change the default location of the project',
    type: 'string'
  })
  .options('strictSSL', {
    describe: 'setting to pass to the Openshift Rest Client. Set to false if using a self-sign cert'
  })
  .option('configLocation', {
    describe: 'change the default location of the config',
    type: 'string'
  })
  .options('tryServiceAccount', {
    describe: `setting to pass to the Openshift Config Loader. Set to false to by-pass service account lookup
    or use the KUBERNETES_AUTH_TRYSERVICEACCOUNT environment variable
    `
  })
  .options('dockerImage', {
    describe: 'the s2i image to use, defaults to bucharest-gold/centos7-s2i-nodejs',
    type: 'string'
  })
  .options('nodeVersion', {
    describe: 'the version of Node.js to use for the deployed application.',
    alias: 'n',
    type: 'string',
    default: 'latest'
  })
  .env('NODESHIFT')
  .option('quiet', {
    describe: 'supress INFO and TRACE lines from output logs',
    type: 'boolean'
  })
  .array('d')
  .options('expose', {
    describe: 'flag to create a default Route and expose the default service',
    choices: [true, false],
    type: 'boolean',
    default: false
  })
  .option('build.recreate', {
    describe: 'flag to recreate a buildConfig or Imagestream',
    choices: ['buildConfig', 'imageStream', false, true],
    default: false
  })
  .options('build.forcePull', {
    describe: 'flag to make your BuildConfig always pull a new image from dockerhub or not',
    choices: [true, false],
    type: 'boolean',
    default: false
  })
  .array('build.env')
  .options('metadata.out', {
    describe: 'determines what should be done with the response metadata from OpenShift',
    choices: ['stdout', 'ignore', '<filename>'],
    type: 'string',
    default: 'ignore'
  })
  .argv;

function commandHandler (argv) {
  const options = createOptions(argv);
  const metadataOut = (options.metadata.out === 'ignore') ? undefined : options.metadata.out;
  const log = require('../lib/common-log')();

  require('./cli')(options).then((response) => {
    if (metadataOut && (metadataOut.trim() !== '')) {
      if (metadataOut === 'stdout') {
        process.stdout.write(JSON.stringify(response, null, 2));
      } else {
        fs.writeFileSync(options.metadata.out, JSON.stringify(response, null, 2), 'utf8');
      }
    } else {
      log.info('complete');
    }
  })
    .catch((err) => {
      log.error(err.message);

      if (err && err.statusCode) {
        log.error('Status code', err.statusCode);
      }

      require('util').debuglog('nodeshift.cli')(err.stack);
      process.exit(1);
    });
}

function createOptions (argv) {
  const options = {};

  options.projectLocation = argv.projectLocation;
  options.dockerImage = argv.dockerImage;
  options.nodeVersion = argv.nodeVersion;
  process.env['NODESHIFT_QUIET'] = argv.quiet === true;
  options.metadata = argv.metadata;
  options.build = argv.build;
  options.cmd = argv.cmd;
  // undeploy might have a positional argument
  options.removeAll = argv.removeAll;
  options.expose = argv.expose;
  options.strictSSL = argv.strictSSL !== 'false';
  options.tryServiceAccount = argv.tryServiceAccount !== 'false';
  options.configLocation = argv.configLocation;

  // Check for the --build.env array
  // If it is there, we need to parse it
  // The values should be in the format KEY=value
  if (argv.build.env) {
    options.build.env = helpers.parseMultiOption(argv.build.env);
  }

  // Check for the -d array
  // If it is there, we need to parse it.
  // The values should be in the format KEY=value
  if (argv.d) {
    options.definedProperties = helpers.parseMultiOption(argv.d);
  } else {
    options.definedProperties = [];
  }

  return options;
}
